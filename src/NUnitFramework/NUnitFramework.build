<?xml version="1.0"?>
<project name="NUnit" default="build" basedir=".">

<description>
**************************************************************************
* This script is used to build the NUnit Framework for any supported     *
* runtime that is installed on the system. If you are unsure about which *
* runtimes are avaiable use the list-runtimes or dump-settings target.   *
* At least one of the supported runtimes and sdk must be installed.      *
*                                                                        *
* Dependencies:                                                          *                                         
*                                                                        *
*   The script requires the NAnt 0.90 release or a later version.        *
*                                                                        *
*   Either NCover or PartCover is required to run the 'test-coverage'    *
*   target. Set one of the properties 'ncover.dir' or 'partcover.dir'    *
*   to the directory path where the program is installed or set the      *
*   NCOVER_DIR or PARTCOVER_DIR environment variables to the same path.  *
*                                                                        *
* NOTE: You may set any of the properties mentioned above either at the  *
* command line using the NANT -D option or by creating a file called     *
* 'local.settings.include' and using property elements. Environment      *
* variable settings take precedence over any property values.            *
**************************************************************************
</description>

<!-- ***************************************************************** -->
<!-- ********* Common properties that control the build ************** -->
<!-- ***************************************************************** -->
 
  <!-- Project name - used as a prefix for packages -->
  <property name="project.name" value="NUnitFramework"/>

  <!-- NUnit Package Version - Three digits -->
  <property name="package.version" value="2.9.5"/>

  <!-- Package Configuration (Release, Alpha, Beta, etc.) -->
  <property name="package.configuration" value=""/>
  
  <!-- Base name for packages - add suffix for Alpha, Beta, RC -->
  <property name="package.name" 
      value="${project.name}-${package.version}"/>

  <!-- .NET Frameworks supported by this build script. The first
       installed framework found is the default for builds. 
       The first .NET and Mono frameworks found are the
       respective net and mono defaults. -->
  <property name="supported.frameworks" 
    value="net-4.0,net-3.5,net-2.0,net-1.1,net-1.0,mono-3.5,mono-2.0,mono-1.0,netcf-3.5,netcf-2.0,netcf-1.0"/>

  <!-- Set default warning level for compiles -->
  <property name="warn" value="4" unless="${property::exists('warn')}"/>

<!-- ***************************************************************** -->
<!-- *********          Define Project Directories           ********* -->
<!-- ***************************************************************** -->

  <!-- Project base dir is nant project base dir -->
  <property name="project.base.dir"
    value="${project::get-base-directory()}"/>

  <!-- Other directories are derived from base dir -->
  <property name="project.build.dir" 
    value="${path::combine(project.base.dir,'build')}"/>
  <property name="project.package.dir" 
    value="${path::combine(project.base.dir,'package')}"/>
  <property name="project.src.dir"
    value="${path::combine(project.base.dir, 'src')}"/>
  <property name="project.doc.dir"
    value="${path::combine(project.base.dir,'doc')}"/>
  <property name="project.samples.dir"
    value="${path::combine(project.base.dir,'samples')}"/>
  <property name="project.lib.dir"
    value="${path::combine(project.base.dir,'lib')}"/>


<!-- ***************************************************************** -->
<!-- *********         Define Packaging Directories          ********* -->
<!-- ***************************************************************** -->

  <property name="package.working.dir" 
    value="${path::combine(project.package.dir,package.name)}"/>
  <property name="package.bin.dir" 
    value="${path::combine(package.working.dir,'bin')}"/>
  <property name="package.doc.dir" 
    value="${path::combine(package.working.dir,'doc')}"/>
  <property name="package.samples.dir" 
    value="${path::combine(package.working.dir,'samples')}"/>
  <property name="package.src.dir" 
    value="${path::combine(package.working.dir,'src')}"/>
  <property name="package.lib.dir" 
    value="${path::combine(package.working.dir,'lib')}"/>

<!-- ***************************************************************** -->
<!-- *********        Set Default Build Configuration        ********* -->
<!-- ***************************************************************** -->

  <property name="build.config" value="debug"/>
  <property name="build.defines" value=""/>

<!-- ***************************************************************** -->
<!-- *********       Set Default Runtime Configuration       ********* -->
<!-- ***************************************************************** -->

  <foreach item="String" delim="," 
      property="framework" in="${supported.frameworks}">

    <!-- NOTE: sdk-exists causes an error if the framework is not installed! -->
    <if test="${framework::exists( framework )}">
    <if test="${framework::sdk-exists( framework )}">
      <property name="installed.frameworks" value="${installed.frameworks},${framework}"
        if="${property::exists('installed.frameworks')}"/>
      <property name="installed.frameworks" value="${framework}"
        unless="${property::exists('installed.frameworks')}"/>
      <property name="default.runtime" value="${framework}"
        unless="${property::exists('default.runtime')}"/>
      <property name="default.net.runtime" value="${framework}"
        if="${string::starts-with(framework,'net')}"
        unless="${property::exists('default.net.runtime')}"/>
      <property name="default.mono.runtime" value="${framework}"
        if="${string::starts-with(framework,'mono')}"
        unless="${property::exists('default.mono.runtime')}"/>
    </if>
    </if>

  </foreach>

  <call target="set-${default.runtime}-runtime-config" />

<!-- ***************************************************************** -->
<!-- *********   Define directories for external tools    ************ -->
<!-- ***************************************************************** -->

<!-- ***************************************************************** -->
<!-- In the optional local.settings.include file, installations may    -->
<!-- set properties to the location of external tools. Properties      -->
<!-- ncover.dir and partcover.dir are used by the script to locate     -->
<!-- the corresponding tools if set.                                   -->
<!-- ***************************************************************** -->
  <include buildfile="local.settings.include" failonerror="false"/>

<!-- ***************************************************************** -->
<!-- In place of local.settings.include, or to override its settings,  -->
<!-- users may set environment variables NCOVER_DIR or PARTCOVER_DIR   -->
<!-- to the location of the corresponding tools.                       -->
<!-- ***************************************************************** -->
  <if test="${environment::variable-exists('NCOVER_DIR')}">
    <property name="ncover.dir"
      value="${environment::get-variable('NCOVER_DIR')}"/>
  </if>

  <if test="${environment::variable-exists('PARTCOVER_DIR')}">
    <property name="partcover.dir"
      value="${environment::get-variable('PARTCOVER_DIR')}"/>
  </if>

<!-- ***************************************************************** -->
<!-- ***          Targets that set the build configuration         *** -->
<!-- ***     These must come before actions like build or test     *** -->
<!-- ***************************************************************** -->

  <target name="debug" depends="set-debug-build-config"
    description="Set config to debug for commands that follow"/>

  <target name="release" depends="set-release-build-config"
    description="Set config to release for commands that follow"/>

<!-- ***************************************************************** -->
<!-- ***         Targets that set the runtime configuration        *** -->
<!-- ***     These must come before actions like build or test     *** -->
<!-- ***************************************************************** -->

  <target name="net" depends="set-default-dot-net-runtime-config"
    description="Set runtime to default .NET version"/>

  <target name="net-1.0" depends="set-net-1.0-runtime-config"
    description="Set runtime to .NET 1.0 for commands that follow"/>

  <target name="net-1.1" depends="set-net-1.1-runtime-config"
    description="Set runtime to .NET 1.1 for commands that follow"/>
      
  <target name="net-2.0" depends="set-net-2.0-runtime-config"
    description="Set runtime to .NET 2.0 for commands that follow"/>
      
  <target name="net-3.5" depends="set-net-3.5-runtime-config"
    description="Set runtime to .NET 3.5 for commands that follow"/>

  <target name="net-4.0" depends="set-net-4.0-runtime-config"
    description="Set runtime to .NET 4.0 for commands that follow"/>

  <target name="netcf-1.0" depends="set-netcf-1.0-runtime-config"
    description="Set runtime to CF 1.0 for commands that follow"/>
      
  <target name="netcf-2.0" depends="set-netcf-2.0-runtime-config"
    description="Set runtime to CF 2.0 for commands that follow"/>
      
  <target name="netcf-3.5" depends="set-netcf-3.5-runtime-config"
    description="Set runtime to CF 3.5 for commands that follow"/>
      
  <target name="mono" depends="set-default-mono-runtime-config"
    description="Set runtime to default Mono version"/>

  <target name="mono-1.0" depends="set-mono-1.0-runtime-config"
    description="Set runtime to Mono 1.0 for commands that follow"/>
  
  <target name="mono-2.0" depends="set-mono-2.0-runtime-config"
    description="Set runtime to Mono 2.0 for commands that follow"/>

  <target name="mono-3.5" depends="set-mono-3.5-runtime-config"
    description="Set runtime to Mono 3.5 for commands that follow"/>

<!-- ***************************************************************** -->
<!-- ***             Targets that clean directories                *** -->
<!-- ***************************************************************** -->

  <target name="clean" depends="set-build-dir"
      description="Removes output for the current runtime and config">

    <delete dir="${current.build.dir}" 
      if="${directory::exists( current.build.dir )}"/>

    <delete file="src/GeneratedAssemblyInfo.cs"
      if="${file::exists( 'src/GeneratedAssemblyInfo.cs' )}"/>

  </target>

  <target name="clean-all" 
      description="Removes output for all runtimes and configs">
 
    <delete dir="${project.build.dir}" 
      if="${directory::exists( project.build.dir )}"/>

    <delete file="src/GeneratedAssemblyInfo.cs"
      if="${file::exists( 'src/GeneratedAssemblyInfo.cs' )}"/>

  </target>

  <target name="clean-package-dir">

        <delete dir="${package.working.dir}" 
            if="${directory::exists( package.working.dir )}"/>

  </target>

<!-- ***************************************************************** -->
<!-- ***              Targets that perform builds                  *** -->
<!-- ***************************************************************** -->

  <target name="build-all"
    description="Build the current config for all supported runtimes">


    <foreach item="String" delim="," 
        property="framework" in="${installed.frameworks}">

      <call target="set-${framework}-runtime-config"/>
      <call target="build"/>

    </foreach>

  </target>

  <target name="build"
    description="Build using the current runtime and config">

    <call target="build-nunit" unless="${runtime.platform=='netcf'}"/>
    <call target="build-nunitlite"/>

  </target>

  <target name="build-nunit" depends="make-build-dir">

    <fail if="${runtime.platform=='netcf'}"
      message="The full NUnit framework may not be built for netcf"/>

    <nant target="build" buildfile="framework/nunit.framework.build"/>
    <nant target="build" buildfile="test-assembly/test-assembly.build"/>
    <nant target="build" buildfile="tests/nunit.framework.tests.build"/>
    <nant target="build" buildfile="direct-runner/direct-runner.build"/>
    <nant target="build" buildfile="mock-assembly/mock-assembly.build"/>

  </target>

  <target name="build-nunitlite" depends="make-build-dir">

    <nant target="build" buildfile="framework/nunitlite.build"/>
    <nant target="build" buildfile="tests/nunitlite.tests.build"/>

  </target>

<!-- ***************************************************************** -->
<!-- ***                 Targets for running tests                 *** -->
<!-- ***************************************************************** -->

  <target name="test" depends="build,run-test"
    description="Build and run tests for selected config and runtime"/>

  <target name="run-test">

    <call target="nunit-test" unless="${runtime.platform=='netcf'}"/>
    <call target="nunitlite-test"/>

  </target>

  <target name="init-test" depends="set-build-dir">

    <property name="result.file" 
      value="TestResult-${nant.settings.currentframework}"/>

    <property name="nunit.options" value="" 
      unless="${property::exists('nunit.options')}"/>

    <property name="nunit.commandline"
      value="nunit.framework.tests.dll ${nunit.options} -xml:${result.file}.xml"/>

  </target>

  <target name="nunit-test" depends="init-test">

    <echo message="*"/>
    <echo message="* Testing the nunit.framework ${runtime.config} ${build.config} build"/>
    <echo message="*"/>

    <exec basedir="${current.build.dir}"
          workingdir="${current.build.dir}"
          program="direct-runner.exe"
          managed="strict"
          commandline="${nunit.commandline}" />

  </target>

  <target name="nunitlite-test" depends="init-test">

    <echo message="*"/>
    <echo message="* Testing the NUnitLite ${runtime.config} ${build.config} build"/>
    <echo message="*"/>

    <exec basedir="${current.build.dir}"
	  program="nunitlite.tests.exe" 
          managed="strict" />

  </target>

  <target name="test-coverage" depends="build"
    description="Run tests under PartCover to get coverage results">

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} test coverage run"/>
    <echo message="*"/>

    <fail unless="${property::exists('ncover.dir') or property::exists('partcover.dir')}">
Unable to locate either NCover or PartCover, one of which is needed for
test coverage. Edit your 'local.settings.include' file to set property
'ncover.dir' or 'partcover.dir' to the directory where the program is 
installed. Alternatively, you may set the NCOVER_DIR or PARTCOVER_DIR 
environment variable.
    </fail>

    <call target="run-ncover" 
      if="${property::exists('ncover.dir')}"/>

    <call target="run-partcover" 
      if="${property::exists('partcover.dir')}"
      unless="${property::exists('ncover.dir')}"/>

  </target>

  <target name="run-ncover" depends="init-test">

    <fail unless="${property::exists('ncover.dir')}">
Unable to locate your NCover installation. Set property 'ncover.dir'
to the directory where it is installed in your 'local.settings.include'
file or set the NCOVER_DIR environment variable.
    </fail>

    <property name="ncover.commandline"
      value="direct-runner.exe ${nunit.commandline} //a nunit.framework //x TestCoverage-${nant.settings.currentframework}.xml"/>

    <exec basedir="${ncover.dir}"
          workingdir="${current.build.dir}" 
	  program="NCover.Console.exe" 
          managed="strict"
	  commandline="${ncover.commandline}" />

  </target>

  <target name="run-partcover" depends="init-test">

    <fail unless="${property::exists('partcover.dir')}">
Unable to locate your PartCover installation. Set property 'partcover.dir'
to the directory where it is installed in your 'local.settings.include'
file or set the PARTCOVER_DIR environment variable.
    </fail>

    <property name="partcover.commandline"
      value='--target direct-runner.exe --target-args "${nunit.commandline}" --include [nunit.framework]* --output TestCoverage-${nant.settings.currentframework}.xml'/>

    <exec basedir="${partcover.dir}"
          workingdir="${current.build.dir}" 
	  program="PartCover.exe" 
          managed="strict"
	  commandline="${partcover.commandline}" />

  </target>

  <target name="test-all"
      description="Build and test all runtimes for current config">

    <foreach item="String" delim="," 
        property="framework" in="${installed.frameworks}">

      <call target="set-${framework}-runtime-config"/>
      <call target="test" />

    </foreach>

  </target>

<!-- ***************************************************************** -->
<!-- *       Build the NUnit samples - not part of normal build    *** -->
<!-- ***************************************************************** -->

  <!--
  <property name="samples.bin.dir"
    value="${path::combine(project.samples.dir, 'bin')}"/>

  <target name="clean-samples" description="Removes the samples build directory">
    <delete dir="${samples.bin.dir}" />
  </target>

  <target name="build-samples" depends="build"
     description="Build the NUnit samples">
    
    <mkdir dir="${samples.bin.dir}" unless="${directory::exists(samples.bin.dir)}" />

    <copy todir="${samples.bin.dir}"
      file="${path::combine(current.build.dir,'nunit.framework.dll')}" />
    <copy todir="${samples.bin.dir}"
      file="${path::combine(current.build.dir,'nunit.core.dll')}" />

    <nant target="build">
      <buildfiles refid="sample.buildfiles" />
    </nant>

  </target>
  -->

<!-- ***************************************************************** -->
<!-- ***         Targets for packaging the NUnit distribution      *** -->
<!-- ***************************************************************** -->

  <target name="package-all"
      description="Create all the standard packages for distribution">

    <call target="package-src"/>
    <!--<call target="package-docs"/>-->

    <call target="package-full"/>
    <call target="package-mono"/>
    <call target="package-netcf"/>

  </target>

  <target name="package-full"
      description="Create the complete binary package with all supported runtimes">

    <property name="package.config" value=""/>
    <property name="package.runtimes" value="net-4.0+net-3.5+net-2.0+net-1.1+netcf-3.5+netcf-2.0+netcf-1.0"/>

    <call target="package"/>

  </target>

  <target name="package-mono"
      description="Create the mono binary package">

    <property name="package.config" value="-mono"/>
    <property name="package.runtimes" value="mono-3.5+mono-2.0+mono-1.0"/>

    <call target="package"/>

  </target>

  <target name="package-netcf"
      description="Create the netcf binary package">

    <property name="package.config" value="-netcf"/>
    <property name="package.runtimes" value="netcf-3.5+netcf-2.0+netcf-1.0"/>

    <call target="package"/>

  </target>

<!-- ***************************************************************** -->
<!-- ***   Package Using the Currently Selected Package Config     *** -->
<!-- ***      or the default package if none is selected           *** -->
<!-- ***************************************************************** -->

  <target name="package" depends="build-install-image"
      description="Create a package using the current or default config">

    <call target="create-zip"/>

  </target>

<!-- ***************************************************************** -->
<!-- ***          Create zip from existing install image           *** -->
<!-- ***************************************************************** -->

  <target name="create-zip">

    <!--<property name="zip.file.name" 
      value="${package.name}-${package.config}${build.suffix}"
      unless="${package.config==default.package.config}"/>
    <property name="zip.file.name" 
      value="${package.name}${build.suffix}"
      if="${package.config==default.package.config}"/>-->

    <property name="zip.file.name" 
      value="${package.name}${package.config}${build.suffix}"/>

    <zip ziplevel="9"
        zipfile="${project.package.dir}/${zip.file.name}.zip">
      <fileset basedir="${package.working.dir}" prefix="${package.name}">
        <include name="**"/>
      </fileset>
    </zip>

  </target>

<!-- ***************************************************************** -->
<!-- ***                  Package Source Files                     *** -->
<!-- ***************************************************************** -->

  <target name="package-src" depends="clean-package-dir"
    description="Create full source package for developer use">

    <call target="copy-docs"/>
    <!--<call target="copy-samples"/>-->
    <call target="copy-src"/>

    <copy file="LICENSE.txt" todir="${package.working.dir}" />

    <zip  ziplevel="9"
        zipfile="${project.package.dir}/${package.name}-src.zip">
      <fileset basedir="${package.working.dir}" prefix="${package.name}">
        <include name="**"/>
      </fileset>
    </zip>
  </target>

<!-- ***************************************************************** -->
<!-- ***                      Package docs                         *** -->
<!-- ***************************************************************** -->

  <target name="package-docs" depends="clean-package-dir"
      description="Create a zip of the docs only">

    <call target="copy-docs"/>

    <zip ziplevel="9"
        zipfile="${project.package.dir}/${package.name}-docs.zip">
      <fileset basedir="${package.working.dir}" prefix="${package.name}">
        <include name="**"/>
      </fileset>
    </zip>
    
  </target>
  
<!-- ***************************************************************** -->
<!-- ***            Helper targets used for packaging              *** -->
<!-- ***************************************************************** -->

<!-- ***************************************************************** -->
<!-- ***            Build install image for a package              *** -->
<!-- ***************************************************************** -->

  <target name="build-install-image" depends="clean-package-dir">

    <copy todir="${package.working.dir}">
      <fileset>
        <include name="LICENSE.txt"/>
        <include name="NOTICES.txt"/>
      </fileset>
    </copy>

    <foreach item="String" delim="+"
      property="runtime" in="${package.runtimes}">

      <if test="${framework::exists( runtime )}">
        <if test="${framework::sdk-exists( runtime )}">
          <call target="set-${runtime}-runtime-config"/>
          <call target="copy-bins" />
        </if>
      </if>
    </foreach>

    <call target="copy-docs" />
    <!--<call target="copy-samples" />-->

  </target>

<!-- ***************************************************************** -->
<!-- ***           Copy a set of binaries for a package            *** -->
<!-- ***************************************************************** -->

  <target name="copy-bins" depends="build">

    <mkdir dir="${package.bin.dir}"/>
    <copy todir="${package.bin.dir}/${runtime.config}">
      <fileset basedir="${current.build.dir}">
        <include name="nunit.framework.*" />
        <include name="nunitlite.*" />
        <include name="test-assembly.*" />
        <include name="direct-runner.*" />
      </fileset>
    </copy>

  </target>
  
<!-- ***************************************************************** -->
<!-- ***           Copy the documentation for a package            *** -->
<!-- ***************************************************************** -->

  <target name="copy-docs">
    <mkdir dir="${package.doc.dir}"/>
    <copy todir="${package.doc.dir}">
      <fileset basedir="${project.doc.dir}">
        <include name="*.html"/>
	<include name="nunit.css"/>
        <include name="codeFuncs.js"/>
        <include name="favicon.ico"/>
	<include name="files/*"/>
	<include name="img/*"/>
        <exclude name="img/thumbs.db"/>
      </fileset>
    </copy>
  </target>

<!-- ***************************************************************** -->
<!-- ***            Copy sample programs for a package             *** -->
<!-- ***************************************************************** -->

<!--
  <target name="copy-samples">

    <mkdir dir="${package.samples.dir}"/>

    <copy todir="${package.samples.dir}">
      <fileset basedir="${project.samples.dir}">
        <include name="ReadMe.txt" />
        <include name="samples.common" />
        <include name="csharp/CSharp.sln" />
        <include name="jsharp/jsharp.sln" />
        <include name="vb/vb-samples.sln" />
        <include name="cpp/managed/managed-cpp.sln" />
        <include name="cpp/cpp-cli/cpp-cli.sln" />
        <include name="Extensibility/Core/CoreExtensibility.sln" />
        <include name="Extensibility/Core/Install.bat" />
      </fileset>
    </copy>

    <nant target="package">
      <buildfiles refid="sample.buildfiles"  failonerror="true" />
    </nant>

  </target>
-->

<!-- ***************************************************************** -->
<!-- ***            Copy the source code for a package             *** -->
<!-- ***************************************************************** -->

  <target name="copy-src">
    <delete dir="${package.src.dir}" />
    <mkdir dir="${package.src.dir}"/>

    <copy todir="${package.src.dir}">
      <fileset basedir="${project.base.dir}">
        <include name="LICENSE.txt"/>
        <include name="NOTICES.txt"/>
        <include name="NUnitFramework.build"/>
        <include name="nunit.common.include"/>
        <include name="nunit.snk"/>
        <include name="CommonAssemblyInfo.cs"/>
        <include name="NUnitFramework*.sln"/>
        <include name="NUnitLite*.sln"/>
        <include name="nant"/>
        <include name="nant.bat"/>
      </fileset>
    </copy>

    <nant target="package" buildfile="framework/nunit.framework.build" />
    <nant target="package" buildfile="tests/nunit.framework.tests.build" />
    <nant target="package" buildfile="test-assembly/test-assembly.build" />
    <nant target="package" buildfile="direct-runner/direct-runner.build" />
    <nant target="package" buildfile="mock-assembly/mock-assembly.build" />

  </target>

<!-- ***************************************************************** -->
<!-- ********* Targets for setting the build configuration *********** -->
<!-- ***************************************************************** -->

  <target name="set-build-config" description="Set the build config">
    <call target="set-${build.config}-build-config"/>
  </target>

  <target name="set-debug-build-config">
    <property name="build.config" value="debug"/>
    <property name="build.debug" value="true"/>
    <property name="build.defines" value="DEBUG,TRACE,${runtime.defines}"
        dynamic="true"/>
    <property name="build.suffix" value="-dbg"/>
  </target>
	
  <target name="set-release-build-config">
    <property name="build.config" value="release"/>
    <property name="build.debug" value="false"/>
    <property name="build.defines" value="TRACE,${runtime.defines}"
	dynamic="true"/>
    <property name="build.suffix" value=""/>
  </target>

<!-- ***************************************************************** -->
<!-- ***    Targets for setting the runtime configuration          *** -->
<!-- ***************************************************************** -->

  <target name="set-runtime-config">   
    <call target="set-${runtime.config}-runtime-config"/>
  </target>
  
  <target name="set-default-dot-net-runtime-config">
    <fail unless="${property::exists( 'default.net.runtime' )}"
      message="No versions of the .NET SDK were found"/>

    <call target="set-${default.net.runtime}-runtime-config" />
  </target>

  <target name="set-default-mono-runtime-config">
    <fail unless="${property::exists( 'default.mono.runtime' )}"
      message="No versions of the Mono runtime were found"/>

    <call target="set-${default.mono.runtime}-runtime-config" />
  </target>

  <target name="set-net-1.0-runtime-config">
    <fail unless="${framework::exists('net-1.0') and framework::sdk-exists('net-1.0')}"
      message="The .NET 1.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="net"/>
    <property name="runtime.version" value="1.0"/>
    <property name="runtime.config" value="net-1.0"/>
    <property name="runtime.defines" value="MSNET,NET_1_0,CLR_1_0"/>
    <property name="nant.settings.currentframework" value="net-1.0"/>
  </target>
	
  <target name="set-net-1.1-runtime-config">
    <fail unless="${framework::exists('net-1.1') and framework::sdk-exists('net-1.1')}"
      message="The .NET 1.1 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="net"/>
    <property name="runtime.version" value="1.1"/>
    <property name="runtime.config" value="net-1.1"/>
    <property name="runtime.defines" value="MSNET,NET_1_1,CLR_1_1"/>
    <property name="nant.settings.currentframework" value="net-1.1"/>
  </target>
	
  <target name="set-net-2.0-runtime-config">
    <fail unless="${framework::exists('net-2.0') and framework::sdk-exists('net-2.0')}"
      message="The .NET 2.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="net"/>
    <property name="runtime.version" value="2.0"/>
    <property name="runtime.config" value="net-2.0"/>
    <property name="runtime.defines" value="MSNET,NET_2_0,CLR_2_0"/>
    <property name="nant.settings.currentframework" value="net-2.0"/>
  </target>
   
  <target name="set-net-3.0-runtime-config">
    <fail unless="${framework::exists('net-3.0') and framework::sdk-exists('net-3.0')}"
      message="The .NET 3.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="net"/>
    <property name="runtime.version" value="3.0"/>
    <property name="runtime.config" value="net-3.0"/>
    <property name="runtime.defines" value="MSNET,NET_3_0,CLR_2_0"/>
    <property name="nant.settings.currentframework" value="net-3.0"/>
  </target>
	
  <target name="set-net-3.5-runtime-config">
    <fail unless="${framework::exists('net-3.5') and framework::sdk-exists('net-3.5')}"
      message="The .NET 2.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="net"/>
    <property name="runtime.version" value="3.5"/>
    <property name="runtime.config" value="net-3.5"/>
    <property name="runtime.defines" value="MSNET,NET_3_5,CLR_2_0,CS_3_0"/>
    <property name="nant.settings.currentframework" value="net-3.5"/>
  </target>
 	
  <target name="set-net-4.0-runtime-config">
    <fail unless="${framework::exists('net-4.0') and framework::sdk-exists('net-4.0')}"
      message="The .NET 4.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="net"/>
    <property name="runtime.version" value="4.0"/>
    <property name="runtime.config" value="net-4.0"/>
    <property name="runtime.defines" value="MSNET,NET_4_0,CLR_4_0,CS_4_0"/>
    <property name="nant.settings.currentframework" value="net-4.0"/>
  </target>
 	
  <target name="set-netcf-1.0-runtime-config">
    <fail unless="${framework::exists('netcf-1.0') and framework::sdk-exists('netcf-1.0')}"
      message="The NETCF 1.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="netcf"/>
    <property name="runtime.version" value="1.0"/>
    <property name="runtime.config" value="netcf-1.0"/>
    <property name="runtime.defines" value="NETCF,NETCF_1_0"/>
    <property name="nant.settings.currentframework" value="netcf-1.0"/>
  </target>

  <target name="set-netcf-2.0-runtime-config">
    <fail unless="${framework::exists('netcf-2.0') and framework::sdk-exists('netcf-2.0')}"
      message="The NETCF 2.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="netcf"/>
    <property name="runtime.version" value="2.0"/>
    <property name="runtime.config" value="netcf-2.0"/>
    <property name="runtime.defines" value="NETCF,NETCF_2_0,CLR_2_0"/>
    <property name="nant.settings.currentframework" value="netcf-2.0"/>
  </target>

  <target name="set-netcf-3.5-runtime-config">
    <fail unless="${framework::exists('netcf-3.5') and framework::sdk-exists('netcf-3.5')}"
      message="The NETCF 3.5 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="netcf"/>
    <property name="runtime.version" value="3.5"/>
    <property name="runtime.config" value="netcf-3.5"/>
    <property name="runtime.defines" value="NETCF,NETCF_3_5,CLR_2_0"/>
    <property name="nant.settings.currentframework" value="netcf-3.5"/>
  </target>

  <target name="set-mono-1.0-runtime-config">
    <fail unless="${framework::exists('mono-1.0') and framework::sdk-exists('mono-1.0')}"
      message="The Mono 1.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="mono"/>
    <property name="runtime.version" value="1.0"/>
    <property name="runtime.config" value="mono-1.0"/>
    <property name="runtime.defines" value="MONO,MONO_1_0,CLR_1_1"/>
    <property name="runtime.testproj" value="NUnitTests.v1.nunit"/>
    <property name="nant.settings.currentframework" value="mono-1.0"/>
  </target>

  <target name="set-mono-2.0-runtime-config">
    <fail unless="${framework::exists('mono-2.0') and framework::sdk-exists('mono-2.0')}"
      message="The Mono 2.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="mono"/>
    <property name="runtime.version" value="2.0"/>
    <property name="runtime.config" value="mono-2.0"/>
    <property name="runtime.defines" value="MONO,MONO_2_0,CLR_2_0"/>
    <property name="nant.settings.currentframework" value="mono-2.0"/>
  </target>

  <target name="set-mono-3.5-runtime-config">
    <fail unless="${framework::exists('mono-3.5') and framework::sdk-exists('mono-3.5')}"
      message="The Mono 3.5 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="mono"/>
    <property name="runtime.version" value="3.5"/>
    <property name="runtime.config" value="mono-3.5"/>
    <property name="runtime.defines" value="MONO,MONO_3_5,CLR_2_0"/>
    <property name="nant.settings.currentframework" value="mono-3.5"/>
  </target>

<!-- ***************************************************************** -->
<!-- **********           Set the build directory            ********* -->
<!-- ***************************************************************** -->

  <!-- Set up the build directory -->
  <target name="set-build-dir"
    depends="set-build-config,set-runtime-config">

    <property name="runtime.platform.dir"
      value="${path::combine(project.build.dir,runtime.platform)}"/>
    <property name="runtime.version.dir"
      value="${path::combine(runtime.platform.dir,runtime.version)}"/>
    <property name="current.build.dir" 
      value="${path::combine(runtime.version.dir,build.config)}"/>

  </target>
  
<!-- ***************************************************************** -->
<!-- **********          Create the build directory          ********* -->
<!-- ***************************************************************** -->

  <target name="make-build-dir" depends="set-build-dir">
    <mkdir dir="${current.build.dir}"
      unless="${directory::exists(current.build.dir)}"/>
  </target>

<!-- ***************************************************************** -->
<!-- ***           Dump configuration settings for debugging       *** -->
<!-- ***************************************************************** -->

  <target name="dump-settings" depends="set-build-dir">

    <echo>Project Directories</echo>
    <echo>  Base:      ${project.base.dir}</echo>
    <echo>   Doc:      ${project.doc.dir}</echo>
    <echo>   Samples:  ${project.samples.dir}</echo>
    <echo>   Source:   ${project.src.dir}</echo>
    <echo>   Build:    ${project.build.dir}</echo>
    <echo>   Package:  ${project.package.dir}</echo>
    <echo></echo>
    <echo>Runtime Versions</echo>
    <echo>  Supported: ${supported.frameworks}</echo>
    <echo>  Installed: ${installed.frameworks}</echo>
    <echo>  Default:   ${default.runtime}</echo>
    <if test="${property::exists('default.net.runtime')}">
    <echo>    .Net:    ${default.net.runtime}</echo>
    </if>
    <if test="${not property::exists('default.net.runtime')}">
    <echo>    .Net:    (none)</echo>
    </if>
    <if test="${property::exists('default.mono.runtime')}">
    <echo>    Mono:    ${default.mono.runtime}</echo>
    </if>
    <if test="${not property::exists('default.mono.runtime')}">
    <echo>    Mono:    (none)</echo>
    </if>
    <echo></echo>
    <echo>Current Build Settings</echo>
    <echo>  Config:    ${build.config}</echo>
    <echo>  Runtime:   ${runtime.config}</echo>
    <echo>  Build Dir: ${current.build.dir}</echo>
    <echo>  Defines:   ${build.defines}</echo>
    <echo></echo>
    <echo>Packaging</echo>
    <echo>  Name:      ${package.name}</echo>
    <echo>  Version:   ${package.version}</echo>
    <echo>  Work Dir:  ${package.working.dir}</echo>
    <echo>   Bin:      ${package.bin.dir}</echo>
    <echo>   Doc:      ${package.doc.dir}</echo>
    <echo>   Samples:  ${package.samples.dir}</echo>
    <echo>   Source:   ${package.src.dir}</echo>
    <echo></echo>
    <echo>Current Framework and SDK Directories</echo>
    <echo>  ${framework::get-framework-directory(framework::get-target-framework())}</echo>
    <echo>  ${framework::get-sdk-directory(framework::get-target-framework())}</echo>

  </target>

  <target name="list-runtimes"
      description="Lists available runtimes for building NUnit">
    <echo>
    Available runtime frameworks supported for building NUnit:
    </echo>

    <foreach item="String" delim="," 
        property="framework" in="${installed.frameworks}">
      <echo message="        ${string::pad-right(framework,15,' ')}${framework::get-description(framework)}"/>
    </foreach>

    <echo>
    The default build target is the ${default.runtime} debug config.
    Generic runtime targets use the following defaults:
    </echo>

    <if test="${property::exists('default.net.runtime')}">
    <echo>        net           ${default.net.runtime}</echo>
    </if>
    <if test="${not property::exists('default.net.runtime')}">
    <echo>        net           (none)</echo>
    </if>
    <if test="${property::exists('default.mono.runtime')}">
    <echo>        mono          ${default.mono.runtime}</echo>
    </if>
    <if test="${not property::exists('default.mono.runtime')}">
    <echo>        mono          (none)</echo>
    </if>
  </target>

</project>
